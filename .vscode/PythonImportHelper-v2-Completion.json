[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "reset_database",
        "importPath": "database_simple",
        "description": "database_simple",
        "isExtraImport": true,
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "clear_all_data",
        "importPath": "database_simple",
        "description": "database_simple",
        "isExtraImport": true,
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "get_database_stats",
        "importPath": "database_simple",
        "description": "database_simple",
        "isExtraImport": true,
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "get_connection",
        "importPath": "database_simple",
        "description": "database_simple",
        "isExtraImport": true,
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "insert_image",
        "importPath": "database_simple",
        "description": "database_simple",
        "isExtraImport": true,
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "insert_user",
        "importPath": "database_simple",
        "description": "database_simple",
        "isExtraImport": true,
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "get_image",
        "importPath": "database_simple",
        "description": "database_simple",
        "isExtraImport": true,
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "get_user",
        "importPath": "database_simple",
        "description": "database_simple",
        "isExtraImport": true,
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "get_all_images",
        "importPath": "database_simple",
        "description": "database_simple",
        "isExtraImport": true,
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "get_all_users",
        "importPath": "database_simple",
        "description": "database_simple",
        "isExtraImport": true,
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "reset_database",
        "importPath": "database_simple",
        "description": "database_simple",
        "isExtraImport": true,
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "clear_all_data",
        "importPath": "database_simple",
        "description": "database_simple",
        "isExtraImport": true,
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "get_database_stats",
        "importPath": "database_simple",
        "description": "database_simple",
        "isExtraImport": true,
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTMLResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "binascii",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "binascii",
        "description": "binascii",
        "detail": "binascii",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "config",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "ImageCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ImageResponse",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "importPath": "schemas",
        "description": "schemas",
        "isExtraImport": true,
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "websockets",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "websockets",
        "description": "websockets",
        "detail": "websockets",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config:\n    \"\"\"\n    Configuración centralizada para la aplicación\n    \"\"\"\n    # API Configuration\n    API_HOST: str = os.getenv(\"API_HOST\", \"localhost\")\n    API_PORT: int = int(os.getenv(\"API_PORT\", \"8000\"))\n    API_PROTOCOL: str = os.getenv(\"API_PROTOCOL\", \"http\")\n    @classmethod\n    def get_api_base_url(cls, request: Optional[object] = None) -> str:",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "config = Config()",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Image",
        "kind": 6,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "class Image(Base):\n    __tablename__ = \"images\"\n    id = Column(Integer, primary_key=True, index=True)\n    image_data = Column(Text, nullable=False)  # Base64 string\n    created_at = Column(DateTime, default=datetime.utcnow)\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String(50), nullable=False)\n    email = Column(String(100), nullable=False)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String(50), nullable=False)\n    email = Column(String(100), nullable=False)\n    time = Column(String(50), nullable=False)\n    created_at = Column(DateTime, default=datetime.utcnow)\ndef get_db():\n    db = SessionLocal()\n    try:",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n# Crear las tablas\nBase.metadata.create_all(bind=engine)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SQLITE_DATABASE_URL",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SQLITE_DATABASE_URL = \"sqlite:///./app.db\"\nengine = create_engine(SQLITE_DATABASE_URL, connect_args={\"check_same_thread\": False})\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\nclass Image(Base):\n    __tablename__ = \"images\"\n    id = Column(Integer, primary_key=True, index=True)\n    image_data = Column(Text, nullable=False)  # Base64 string\n    created_at = Column(DateTime, default=datetime.utcnow)\nclass User(Base):",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "engine = create_engine(SQLITE_DATABASE_URL, connect_args={\"check_same_thread\": False})\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\nclass Image(Base):\n    __tablename__ = \"images\"\n    id = Column(Integer, primary_key=True, index=True)\n    image_data = Column(Text, nullable=False)  # Base64 string\n    created_at = Column(DateTime, default=datetime.utcnow)\nclass User(Base):\n    __tablename__ = \"users\"",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\nclass Image(Base):\n    __tablename__ = \"images\"\n    id = Column(Integer, primary_key=True, index=True)\n    image_data = Column(Text, nullable=False)  # Base64 string\n    created_at = Column(DateTime, default=datetime.utcnow)\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, index=True)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "Base = declarative_base()\nclass Image(Base):\n    __tablename__ = \"images\"\n    id = Column(Integer, primary_key=True, index=True)\n    image_data = Column(Text, nullable=False)  # Base64 string\n    created_at = Column(DateTime, default=datetime.utcnow)\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, index=True)\n    username = Column(String(50), nullable=False)",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "init_database",
        "kind": 2,
        "importPath": "database_simple",
        "description": "database_simple",
        "peekOfCode": "def init_database():\n    \"\"\"Inicializar la base de datos y crear las tablas\"\"\"\n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    # Crear tabla de imágenes\n    cursor.execute(\n        \"\"\"\n        CREATE TABLE IF NOT EXISTS images (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            image_data TEXT NOT NULL,",
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "get_connection",
        "kind": 2,
        "importPath": "database_simple",
        "description": "database_simple",
        "peekOfCode": "def get_connection():\n    \"\"\"Obtener conexión a la base de datos\"\"\"\n    return sqlite3.connect(DATABASE_PATH)\ndef insert_image(image_data: str):\n    \"\"\"Insertar una nueva imagen\"\"\"\n    conn = get_connection()\n    cursor = conn.cursor()\n    cursor.execute(\"INSERT INTO images (image_data) VALUES (?)\", (image_data,))\n    image_id = cursor.lastrowid\n    conn.commit()",
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "insert_image",
        "kind": 2,
        "importPath": "database_simple",
        "description": "database_simple",
        "peekOfCode": "def insert_image(image_data: str):\n    \"\"\"Insertar una nueva imagen\"\"\"\n    conn = get_connection()\n    cursor = conn.cursor()\n    cursor.execute(\"INSERT INTO images (image_data) VALUES (?)\", (image_data,))\n    image_id = cursor.lastrowid\n    conn.commit()\n    conn.close()\n    return image_id\ndef insert_user(username: str, email: str, time: str):",
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "insert_user",
        "kind": 2,
        "importPath": "database_simple",
        "description": "database_simple",
        "peekOfCode": "def insert_user(username: str, email: str, time: str):\n    \"\"\"Insertar un nuevo usuario\"\"\"\n    conn = get_connection()\n    cursor = conn.cursor()\n    cursor.execute(\n        \"INSERT INTO users (username, email, time) VALUES (?, ?, ?)\",\n        (username, email, time),\n    )\n    user_id = cursor.lastrowid\n    conn.commit()",
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "get_image",
        "kind": 2,
        "importPath": "database_simple",
        "description": "database_simple",
        "peekOfCode": "def get_image(image_id: int):\n    \"\"\"Obtener una imagen por ID\"\"\"\n    conn = get_connection()\n    cursor = conn.cursor()\n    cursor.execute(\n        \"SELECT id, image_data, created_at FROM images WHERE id = ?\", (image_id,)\n    )\n    result = cursor.fetchone()\n    conn.close()\n    if result:",
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "database_simple",
        "description": "database_simple",
        "peekOfCode": "def get_user(user_id: int):\n    \"\"\"Obtener un usuario por ID\"\"\"\n    conn = get_connection()\n    cursor = conn.cursor()\n    cursor.execute(\n        \"SELECT id, username, email, time, created_at FROM users WHERE id = ?\",\n        (user_id,),\n    )\n    result = cursor.fetchone()\n    conn.close()",
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "get_all_images",
        "kind": 2,
        "importPath": "database_simple",
        "description": "database_simple",
        "peekOfCode": "def get_all_images(limit: int = 50, offset: int = 0):\n    \"\"\"Obtener todas las imágenes con paginación\"\"\"\n    conn = get_connection()\n    cursor = conn.cursor()\n    cursor.execute(\n        \"SELECT id, created_at, image_data FROM images ORDER BY created_at DESC LIMIT ? OFFSET ?\",\n        (limit, offset),\n    )\n    results = cursor.fetchall()\n    # Obtener el total de imágenes",
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "get_all_users",
        "kind": 2,
        "importPath": "database_simple",
        "description": "database_simple",
        "peekOfCode": "def get_all_users(limit: int = 50, offset: int = 0):\n    \"\"\"Obtener todos los usuarios con paginación\"\"\"\n    conn = get_connection()\n    cursor = conn.cursor()\n    cursor.execute(\n        \"SELECT id, username, email, time, created_at FROM users ORDER BY created_at DESC LIMIT ? OFFSET ?\",\n        (limit, offset),\n    )\n    results = cursor.fetchall()\n    # Obtener el total de usuarios",
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "reset_database",
        "kind": 2,
        "importPath": "database_simple",
        "description": "database_simple",
        "peekOfCode": "def reset_database():\n    \"\"\"Resetear completamente la base de datos (eliminar todas las tablas y recrearlas)\"\"\"\n    conn = get_connection()\n    cursor = conn.cursor()\n    try:\n        # Eliminar todas las tablas\n        cursor.execute(\"DROP TABLE IF EXISTS images\")\n        cursor.execute(\"DROP TABLE IF EXISTS users\")\n        conn.commit()\n        conn.close()",
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "clear_all_data",
        "kind": 2,
        "importPath": "database_simple",
        "description": "database_simple",
        "peekOfCode": "def clear_all_data():\n    \"\"\"Limpiar todos los datos pero mantener la estructura de las tablas\"\"\"\n    conn = get_connection()\n    cursor = conn.cursor()\n    try:\n        # Limpiar todas las tablas\n        cursor.execute(\"DELETE FROM images\")\n        cursor.execute(\"DELETE FROM users\")\n        # Resetear los contadores de autoincrement\n        cursor.execute(\"DELETE FROM sqlite_sequence WHERE name='images'\")",
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "get_database_stats",
        "kind": 2,
        "importPath": "database_simple",
        "description": "database_simple",
        "peekOfCode": "def get_database_stats():\n    \"\"\"Obtener estadísticas de la base de datos\"\"\"\n    conn = get_connection()\n    cursor = conn.cursor()\n    try:\n        # Contar imágenes\n        cursor.execute(\"SELECT COUNT(*) FROM images\")\n        images_count = cursor.fetchone()[0]\n        # Contar usuarios\n        cursor.execute(\"SELECT COUNT(*) FROM users\")",
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "DATABASE_PATH",
        "kind": 5,
        "importPath": "database_simple",
        "description": "database_simple",
        "peekOfCode": "DATABASE_PATH = \"app.db\"\ndef init_database():\n    \"\"\"Inicializar la base de datos y crear las tablas\"\"\"\n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    # Crear tabla de imágenes\n    cursor.execute(\n        \"\"\"\n        CREATE TABLE IF NOT EXISTS images (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,",
        "detail": "database_simple",
        "documentation": {}
    },
    {
        "label": "show_stats",
        "kind": 2,
        "importPath": "db_manager",
        "description": "db_manager",
        "peekOfCode": "def show_stats():\n    \"\"\"Mostrar estadísticas de la base de datos\"\"\"\n    try:\n        stats = get_database_stats()\n        print(\"📊 Estadísticas de la Base de Datos\")\n        print(\"=\" * 40)\n        print(f\"🖼️  Imágenes: {stats['images_count']}\")\n        print(f\"👥 Usuarios: {stats['users_count']}\")\n        print(f\"💾 Tamaño: {stats['database_size_mb']} MB\")\n        print(f\"📁 Archivo: {stats['database_path']}\")",
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "reset_db",
        "kind": 2,
        "importPath": "db_manager",
        "description": "db_manager",
        "peekOfCode": "def reset_db():\n    \"\"\"Resetear completamente la base de datos\"\"\"\n    print(\"🚨 ADVERTENCIA: Esto eliminará TODA la base de datos\")\n    confirm = input(\"¿Estás seguro? Escribe 'SI' para confirmar: \")\n    if confirm != \"SI\":\n        print(\"❌ Operación cancelada\")\n        return\n    try:\n        print(\"🔄 Reseteando base de datos...\")\n        reset_database()",
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "clear_data",
        "kind": 2,
        "importPath": "db_manager",
        "description": "db_manager",
        "peekOfCode": "def clear_data():\n    \"\"\"Limpiar todos los datos\"\"\"\n    print(\"🧹 ADVERTENCIA: Esto eliminará TODOS los datos\")\n    confirm = input(\"¿Estás seguro? Escribe 'SI' para confirmar: \")\n    if confirm != \"SI\":\n        print(\"❌ Operación cancelada\")\n        return\n    try:\n        print(\"🧹 Limpiando datos...\")\n        clear_all_data()",
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "clear_images",
        "kind": 2,
        "importPath": "db_manager",
        "description": "db_manager",
        "peekOfCode": "def clear_images():\n    \"\"\"Limpiar solo las imágenes\"\"\"\n    try:\n        conn = get_connection()\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT COUNT(*) FROM images\")\n        count = cursor.fetchone()[0]\n        if count == 0:\n            print(\"ℹ️  No hay imágenes para eliminar\")\n            conn.close()",
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "clear_users",
        "kind": 2,
        "importPath": "db_manager",
        "description": "db_manager",
        "peekOfCode": "def clear_users():\n    \"\"\"Limpiar solo los usuarios\"\"\"\n    try:\n        conn = get_connection()\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT COUNT(*) FROM users\")\n        count = cursor.fetchone()[0]\n        if count == 0:\n            print(\"ℹ️  No hay usuarios para eliminar\")\n            conn.close()",
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "db_manager",
        "description": "db_manager",
        "peekOfCode": "def main():\n    parser = argparse.ArgumentParser(description=\"Gestor de Base de Datos Halloween API\")\n    parser.add_argument(\"action\", choices=[\n        \"stats\", \"reset\", \"clear\", \"clear-images\", \"clear-users\"\n    ], help=\"Acción a realizar\")\n    if len(sys.argv) == 1:\n        print(\"🎃 Gestor de Base de Datos Halloween API\")\n        print(\"=\" * 40)\n        print(\"Uso: python db_manager.py <acción>\")\n        print(\"\\nAcciones disponibles:\")",
        "detail": "db_manager",
        "documentation": {}
    },
    {
        "label": "ImageCreate",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class ImageCreate(BaseModel):\n    image_data: str\nclass UserCreate(BaseModel):\n    username: str\n    email: str\n    time: str\n@app.post(\"/images/\")\nasync def upload_image(image: ImageCreate):\n    \"\"\"\n    Endpoint para recibir y guardar imágenes en base64",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "class UserCreate(BaseModel):\n    username: str\n    email: str\n    time: str\n@app.post(\"/images/\")\nasync def upload_image(image: ImageCreate):\n    \"\"\"\n    Endpoint para recibir y guardar imágenes en base64\n    Formato esperado: {\"image_data\": \"base64_string_here\"}\n    \"\"\"",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "process_template",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def process_template(template_path: str, request: Request, replacements: dict = None) -> str:\n    \"\"\"\n    Procesa un template HTML reemplazando URLs dinámicamente\n    \"\"\"\n    with open(template_path, \"r\", encoding=\"utf-8\") as file:\n        html_template = file.read()\n    # Reemplazos automáticos basados en el request\n    base_url = config.get_api_base_url(request)\n    # Reemplazos por defecto\n    default_replacements = {",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(title=\"Image & User API\", version=\"1.0.0\")\ndef process_template(template_path: str, request: Request, replacements: dict = None) -> str:\n    \"\"\"\n    Procesa un template HTML reemplazando URLs dinámicamente\n    \"\"\"\n    with open(template_path, \"r\", encoding=\"utf-8\") as file:\n        html_template = file.read()\n    # Reemplazos automáticos basados en el request\n    base_url = config.get_api_base_url(request)\n    # Reemplazos por defecto",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main_sqlalchemy",
        "description": "main_sqlalchemy",
        "peekOfCode": "app = FastAPI(title=\"Image & User API\", version=\"1.0.0\")\n@app.post(\"/images/\", response_model=ImageResponse)\nasync def upload_image(image: ImageCreate, db: Session = Depends(get_db)):\n    \"\"\"\n    Endpoint para recibir y guardar imágenes en base64\n    \"\"\"\n    try:\n        # Validar que sea base64 válido\n        base64.b64decode(image.image_data)\n    except (binascii.Error, ValueError):",
        "detail": "main_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ImageCreate",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class ImageCreate(BaseModel):\n    image_data: str  # Base64 string\nclass ImageResponse(BaseModel):\n    id: int\n    created_at: datetime\n    class Config:\n        from_attributes = True\nclass UserCreate(BaseModel):\n    username: str\n    email: str",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "ImageResponse",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class ImageResponse(BaseModel):\n    id: int\n    created_at: datetime\n    class Config:\n        from_attributes = True\nclass UserCreate(BaseModel):\n    username: str\n    email: str\n    time: str\nclass UserResponse(BaseModel):",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class UserCreate(BaseModel):\n    username: str\n    email: str\n    time: str\nclass UserResponse(BaseModel):\n    id: int\n    username: str\n    email: str\n    time: str\n    created_at: datetime",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "schemas",
        "description": "schemas",
        "peekOfCode": "class UserResponse(BaseModel):\n    id: int\n    username: str\n    email: str\n    time: str\n    created_at: datetime\n    class Config:\n        from_attributes = True",
        "detail": "schemas",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "start_server",
        "description": "start_server",
        "peekOfCode": "def main():\n    print(\"🎃 Halloween API Server\")\n    print(\"=\" * 50)\n    host = config.API_HOST\n    port = config.API_PORT\n    print(f\"🚀 Iniciando servidor en {config.API_PROTOCOL}://{host}:{port}\")\n    print(\"\\n📍 Endpoints disponibles:\")\n    print(f\"   • API Root: {config.get_api_base_url()}/\")\n    print(f\"   • Ranking: {config.get_api_base_url()}/ranking\")\n    print(f\"   • Galería: {config.get_api_base_url()}/photos\")",
        "detail": "start_server",
        "documentation": {}
    },
    {
        "label": "test_upload_image",
        "kind": 2,
        "importPath": "test_client",
        "description": "test_client",
        "peekOfCode": "def test_upload_image():\n    \"\"\"Ejemplo de cómo subir una imagen en base64\"\"\"\n    # Imagen de ejemplo (1x1 pixel transparente PNG)\n    sample_image_b64 = \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==\"\n    # Datos para enviar\n    data = {\n        \"image_data\": sample_image_b64\n    }\n    # Hacer POST request\n    response = requests.post(f\"{BASE_URL}/images/\", json=data)",
        "detail": "test_client",
        "documentation": {}
    },
    {
        "label": "test_get_image",
        "kind": 2,
        "importPath": "test_client",
        "description": "test_client",
        "peekOfCode": "def test_get_image(image_id):\n    \"\"\"Ejemplo de cómo obtener una imagen por ID\"\"\"\n    response = requests.get(f\"{BASE_URL}/images/{image_id}\")\n    if response.status_code == 200:\n        result = response.json()\n        print(f\"✅ Imagen obtenida:\")\n        print(f\"ID: {result['id']}\")\n        print(f\"Fecha creación: {result['created_at']}\")\n        print(f\"Tamaño de datos: {len(result['image_data'])} caracteres\")\n        return result",
        "detail": "test_client",
        "documentation": {}
    },
    {
        "label": "encode_local_image",
        "kind": 2,
        "importPath": "test_client",
        "description": "test_client",
        "peekOfCode": "def encode_local_image(file_path):\n    \"\"\"Convertir una imagen local a base64\"\"\"\n    try:\n        with open(file_path, \"rb\") as image_file:\n            encoded_string = base64.b64encode(image_file.read()).decode('utf-8')\n            return encoded_string\n    except FileNotFoundError:\n        print(f\"❌ Archivo no encontrado: {file_path}\")\n        return None\nif __name__ == \"__main__\":",
        "detail": "test_client",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "test_client",
        "description": "test_client",
        "peekOfCode": "BASE_URL = \"http://localhost:8000\"\ndef test_upload_image():\n    \"\"\"Ejemplo de cómo subir una imagen en base64\"\"\"\n    # Imagen de ejemplo (1x1 pixel transparente PNG)\n    sample_image_b64 = \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==\"\n    # Datos para enviar\n    data = {\n        \"image_data\": sample_image_b64\n    }\n    # Hacer POST request",
        "detail": "test_client",
        "documentation": {}
    },
    {
        "label": "test_database_endpoints",
        "kind": 2,
        "importPath": "test_database_reset",
        "description": "test_database_reset",
        "peekOfCode": "def test_database_endpoints():\n    \"\"\"\n    Test para los endpoints de gestión de base de datos\n    \"\"\"\n    base_url = config.get_api_base_url()\n    print(\"🗄️  Test de endpoints de gestión de base de datos\")\n    print(\"=\" * 60)\n    # 1. Obtener estadísticas de la base de datos\n    print(\"\\n1️⃣  Obteniendo estadísticas de la base de datos...\")\n    try:",
        "detail": "test_database_reset",
        "documentation": {}
    },
    {
        "label": "test_full_reset",
        "kind": 2,
        "importPath": "test_database_reset",
        "description": "test_database_reset",
        "peekOfCode": "def test_full_reset():\n    \"\"\"\n    Test para reseteo completo de la base de datos\n    ⚠️  CUIDADO: Esto eliminará TODOS los datos\n    \"\"\"\n    base_url = config.get_api_base_url()\n    print(\"\\n\" + \"🚨\" * 20)\n    print(\"⚠️  TEST DE RESETEO COMPLETO DE BASE DE DATOS\")\n    print(\"🚨\" * 20)\n    # Pedir confirmación",
        "detail": "test_database_reset",
        "documentation": {}
    },
    {
        "label": "test_clear_data",
        "kind": 2,
        "importPath": "test_database_reset",
        "description": "test_database_reset",
        "peekOfCode": "def test_clear_data():\n    \"\"\"\n    Test para limpiar datos (mantiene estructura)\n    ⚠️  CUIDADO: Esto eliminará TODOS los datos\n    \"\"\"\n    base_url = config.get_api_base_url()\n    print(\"\\n\" + \"🧹\" * 20)\n    print(\"⚠️  TEST DE LIMPIEZA DE DATOS\")\n    print(\"🧹\" * 20)\n    # Pedir confirmación",
        "detail": "test_database_reset",
        "documentation": {}
    },
    {
        "label": "show_menu",
        "kind": 2,
        "importPath": "test_database_reset",
        "description": "test_database_reset",
        "peekOfCode": "def show_menu():\n    \"\"\"\n    Mostrar menú de opciones\n    \"\"\"\n    print(\"\\n🗄️  GESTIÓN DE BASE DE DATOS\")\n    print(\"=\" * 40)\n    print(\"1. Test básico (estadísticas + limpiar por separado)\")\n    print(\"2. Reseteo completo (elimina tablas y las recrea)\")\n    print(\"3. Limpiar datos (mantiene estructura)\")\n    print(\"4. Solo estadísticas\")",
        "detail": "test_database_reset",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "test_database_reset",
        "description": "test_database_reset",
        "peekOfCode": "def main():\n    \"\"\"\n    Función principal con menú interactivo\n    \"\"\"\n    base_url = config.get_api_base_url()\n    print(\"🎃 Test de Gestión de Base de datos Halloween API\")\n    print(f\"🔗 Conectando a: {base_url}\")\n    while True:\n        show_menu()\n        choice = input(\"\\nSelecciona una opción: \").strip()",
        "detail": "test_database_reset",
        "documentation": {}
    },
    {
        "label": "create_frontend_payload",
        "kind": 2,
        "importPath": "test_frontend_format",
        "description": "test_frontend_format",
        "peekOfCode": "def create_frontend_payload():\n    \"\"\"Crear payload en el formato que envía tu frontend\"\"\"\n    # Crear imagen JPEG de prueba (muy simple)\n    jpeg_data = b'\\xff\\xd8\\xff\\xe0\\x00\\x10JFIF\\x00\\x01\\x01\\x01\\x00H\\x00H\\x00\\x00\\xff\\xdb\\x00C\\x00\\x08\\x06\\x06\\x07\\x06\\x05\\x08\\x07\\x07\\x07\\t\\t\\x08\\n\\x0c\\x14\\r\\x0c\\x0b\\x0b\\x0c\\x19\\x12\\x13\\x0f\\x14\\x1d\\x1a\\x1f\\x1e\\x1d\\x1a\\x1c\\x1c $.\\' \",#\\x1c\\x1c(7),01444\\x1f\\'9=82<.342\\xff\\xc0\\x00\\x11\\x08\\x00\\x01\\x00\\x01\\x01\\x01\\x11\\x00\\x02\\x11\\x01\\x03\\x11\\x01\\xff\\xc4\\x00\\x14\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\xff\\xc4\\x00\\x14\\x10\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xda\\x00\\x0c\\x03\\x01\\x00\\x02\\x11\\x03\\x11\\x00\\x3f\\x00\\xaa\\xff\\xd9'\n    base64_image = base64.b64encode(jpeg_data).decode('utf-8')\n    # Formato exacto que envía tu frontend\n    payload = {\n        \"image_data_base64\": base64_image,\n        \"mime_type\": \"image/jpeg\",\n        \"style\": \"realistic photo\",",
        "detail": "test_frontend_format",
        "documentation": {}
    },
    {
        "label": "test_save_endpoint",
        "kind": 2,
        "importPath": "test_frontend_format",
        "description": "test_frontend_format",
        "peekOfCode": "def test_save_endpoint():\n    \"\"\"Probar el endpoint /images/save\"\"\"\n    print(\"🧪 Probando endpoint /images/save...\")\n    payload = create_frontend_payload()\n    print(f\"📤 Enviando payload del frontend:\")\n    print(json.dumps({k: v if k != 'image_data_base64' else f\"{v[:50]}...\" for k, v in payload.items()}, indent=2))\n    try:\n        response = requests.post(\n            f\"{BASE_URL}/images/save\",\n            json=payload,",
        "detail": "test_frontend_format",
        "documentation": {}
    },
    {
        "label": "test_with_missing_field",
        "kind": 2,
        "importPath": "test_frontend_format",
        "description": "test_frontend_format",
        "peekOfCode": "def test_with_missing_field():\n    \"\"\"Probar con campo faltante para verificar validación\"\"\"\n    print(\"\\n🧪 Probando con campo faltante...\")\n    payload = {\n        \"mime_type\": \"image/jpeg\",\n        \"style\": \"test\",\n        # Falta image_data_base64\n    }\n    try:\n        response = requests.post(",
        "detail": "test_frontend_format",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "test_frontend_format",
        "description": "test_frontend_format",
        "peekOfCode": "BASE_URL = \"http://localhost:8000\"\ndef create_frontend_payload():\n    \"\"\"Crear payload en el formato que envía tu frontend\"\"\"\n    # Crear imagen JPEG de prueba (muy simple)\n    jpeg_data = b'\\xff\\xd8\\xff\\xe0\\x00\\x10JFIF\\x00\\x01\\x01\\x01\\x00H\\x00H\\x00\\x00\\xff\\xdb\\x00C\\x00\\x08\\x06\\x06\\x07\\x06\\x05\\x08\\x07\\x07\\x07\\t\\t\\x08\\n\\x0c\\x14\\r\\x0c\\x0b\\x0b\\x0c\\x19\\x12\\x13\\x0f\\x14\\x1d\\x1a\\x1f\\x1e\\x1d\\x1a\\x1c\\x1c $.\\' \",#\\x1c\\x1c(7),01444\\x1f\\'9=82<.342\\xff\\xc0\\x00\\x11\\x08\\x00\\x01\\x00\\x01\\x01\\x01\\x11\\x00\\x02\\x11\\x01\\x03\\x11\\x01\\xff\\xc4\\x00\\x14\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\xff\\xc4\\x00\\x14\\x10\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xda\\x00\\x0c\\x03\\x01\\x00\\x02\\x11\\x03\\x11\\x00\\x3f\\x00\\xaa\\xff\\xd9'\n    base64_image = base64.b64encode(jpeg_data).decode('utf-8')\n    # Formato exacto que envía tu frontend\n    payload = {\n        \"image_data_base64\": base64_image,\n        \"mime_type\": \"image/jpeg\",",
        "detail": "test_frontend_format",
        "documentation": {}
    },
    {
        "label": "create_gemini_payload",
        "kind": 2,
        "importPath": "test_gemini_format",
        "description": "test_gemini_format",
        "peekOfCode": "def create_gemini_payload():\n    \"\"\"Crear payload en formato Gemini API\"\"\"\n    # Crear imagen de prueba\n    png_data = b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x08\\x06\\x00\\x00\\x00\\x1f\\x15\\xc4\\x89\\x00\\x00\\x00\\rIDATx\\x9cc\\xf8\\xff\\x9f\\x81\\x1e\\x00\\x07\\x82\\x02\\x7f<\\xc8H\\xef\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82'\n    base64_image = base64.b64encode(png_data).decode('utf-8')\n    # Formato exacto que envía el frontend\n    payload = {\n        \"contents\": [{\n            \"parts\": [\n                { \"text\": \"Analyze this image\" },",
        "detail": "test_gemini_format",
        "documentation": {}
    },
    {
        "label": "test_gemini_endpoint",
        "kind": 2,
        "importPath": "test_gemini_format",
        "description": "test_gemini_format",
        "peekOfCode": "def test_gemini_endpoint():\n    \"\"\"Probar el endpoint con formato Gemini\"\"\"\n    print(\"🧪 Probando endpoint /images/gemini...\")\n    payload = create_gemini_payload()\n    print(f\"📤 Enviando payload Gemini:\")\n    print(json.dumps(payload, indent=2)[:500] + \"...\")\n    try:\n        response = requests.post(\n            f\"{BASE_URL}/images/gemini\",\n            json=payload,",
        "detail": "test_gemini_format",
        "documentation": {}
    },
    {
        "label": "test_original_endpoint",
        "kind": 2,
        "importPath": "test_gemini_format",
        "description": "test_gemini_format",
        "peekOfCode": "def test_original_endpoint():\n    \"\"\"Probar el endpoint original para comparar\"\"\"\n    print(\"\\n🧪 Probando endpoint original /images/...\")\n    # Formato simple\n    payload = {\n        \"image_data\": base64.b64encode(b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x08\\x06\\x00\\x00\\x00\\x1f\\x15\\xc4\\x89\\x00\\x00\\x00\\rIDATx\\x9cc\\xf8\\xff\\x9f\\x81\\x1e\\x00\\x07\\x82\\x02\\x7f<\\xc8H\\xef\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82').decode('utf-8')\n    }\n    try:\n        response = requests.post(\n            f\"{BASE_URL}/images/\",",
        "detail": "test_gemini_format",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "test_gemini_format",
        "description": "test_gemini_format",
        "peekOfCode": "BASE_URL = \"http://localhost:8000\"\ndef create_gemini_payload():\n    \"\"\"Crear payload en formato Gemini API\"\"\"\n    # Crear imagen de prueba\n    png_data = b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x08\\x06\\x00\\x00\\x00\\x1f\\x15\\xc4\\x89\\x00\\x00\\x00\\rIDATx\\x9cc\\xf8\\xff\\x9f\\x81\\x1e\\x00\\x07\\x82\\x02\\x7f<\\xc8H\\xef\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82'\n    base64_image = base64.b64encode(png_data).decode('utf-8')\n    # Formato exacto que envía el frontend\n    payload = {\n        \"contents\": [{\n            \"parts\": [",
        "detail": "test_gemini_format",
        "documentation": {}
    },
    {
        "label": "test_images_save_endpoint",
        "kind": 2,
        "importPath": "test_images_save_endpoint",
        "description": "test_images_save_endpoint",
        "peekOfCode": "def test_images_save_endpoint():\n    \"\"\"\n    Test para el endpoint /images/save\n    Envía datos en el formato esperado por el frontend\n    \"\"\"\n    # URL del endpoint (usando configuración automática)\n    from config import config\n    url = f'{config.get_api_base_url()}/images/save'\n    # Datos de prueba - deja el base64 vacío para que lo agregues\n    base64ImageData = \"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\"",
        "detail": "test_images_save_endpoint",
        "documentation": {}
    },
    {
        "label": "test_with_sample_base64",
        "kind": 2,
        "importPath": "test_images_save_endpoint",
        "description": "test_images_save_endpoint",
        "peekOfCode": "def test_with_sample_base64():\n    \"\"\"\n    Test alternativo con un base64 de muestra muy pequeño (pixel transparente)\n    \"\"\"\n    print(\"\\n\" + \"=\"*60)\n    print(\"🧪 Test con base64 de muestra (pixel transparente PNG)\")\n    print(\"=\"*60)\n    # Base64 de un pixel transparente PNG (muy pequeño para testing)\n    sample_base64 = \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChAI9jU77zgAAAABJRU5ErkJggg==\"\n    from config import config",
        "detail": "test_images_save_endpoint",
        "documentation": {}
    },
    {
        "label": "create_test_image",
        "kind": 2,
        "importPath": "test_image_simple",
        "description": "test_image_simple",
        "peekOfCode": "def create_test_image():\n    \"\"\"Crear una imagen de prueba muy simple en base64\"\"\"\n    # Imagen PNG 1x1 pixel transparente\n    png_data = b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x08\\x06\\x00\\x00\\x00\\x1f\\x15\\xc4\\x89\\x00\\x00\\x00\\rIDATx\\x9cc\\xf8\\xff\\x9f\\x81\\x1e\\x00\\x07\\x82\\x02\\x7f<\\xc8H\\xef\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82'\n    return base64.b64encode(png_data).decode('utf-8')\ndef test_image_upload():\n    \"\"\"Probar subida de imagen\"\"\"\n    print(\"🧪 Probando subida de imagen...\")\n    # Crear imagen de prueba\n    test_image_b64 = create_test_image()",
        "detail": "test_image_simple",
        "documentation": {}
    },
    {
        "label": "test_image_upload",
        "kind": 2,
        "importPath": "test_image_simple",
        "description": "test_image_simple",
        "peekOfCode": "def test_image_upload():\n    \"\"\"Probar subida de imagen\"\"\"\n    print(\"🧪 Probando subida de imagen...\")\n    # Crear imagen de prueba\n    test_image_b64 = create_test_image()\n    print(f\"📷 Imagen de prueba creada: {len(test_image_b64)} caracteres\")\n    # Datos a enviar\n    payload = {\n        \"image_data\": test_image_b64\n    }",
        "detail": "test_image_simple",
        "documentation": {}
    },
    {
        "label": "test_debug_endpoint",
        "kind": 2,
        "importPath": "test_image_simple",
        "description": "test_image_simple",
        "peekOfCode": "def test_debug_endpoint():\n    \"\"\"Probar endpoint de debug\"\"\"\n    print(\"\\n🔍 Probando endpoint de debug...\")\n    test_data = {\n        \"image_data\": \"test_string_123\",\n        \"extra_field\": \"extra_value\"\n    }\n    try:\n        response = requests.post(\n            f\"{BASE_URL}/images/test\",",
        "detail": "test_image_simple",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "test_image_simple",
        "description": "test_image_simple",
        "peekOfCode": "BASE_URL = \"http://localhost:8000\"\ndef create_test_image():\n    \"\"\"Crear una imagen de prueba muy simple en base64\"\"\"\n    # Imagen PNG 1x1 pixel transparente\n    png_data = b'\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x08\\x06\\x00\\x00\\x00\\x1f\\x15\\xc4\\x89\\x00\\x00\\x00\\rIDATx\\x9cc\\xf8\\xff\\x9f\\x81\\x1e\\x00\\x07\\x82\\x02\\x7f<\\xc8H\\xef\\x00\\x00\\x00\\x00IEND\\xaeB`\\x82'\n    return base64.b64encode(png_data).decode('utf-8')\ndef test_image_upload():\n    \"\"\"Probar subida de imagen\"\"\"\n    print(\"🧪 Probando subida de imagen...\")\n    # Crear imagen de prueba",
        "detail": "test_image_simple",
        "documentation": {}
    },
    {
        "label": "create_sample_images",
        "kind": 2,
        "importPath": "test_list_endpoints",
        "description": "test_list_endpoints",
        "peekOfCode": "def create_sample_images(count=5):\n    \"\"\"Crear algunas imágenes de muestra para probar el listado\"\"\"\n    print(f\"📷 Creando {count} imágenes de muestra...\")\n    # Imagen JPEG simple\n    jpeg_data = b'\\xff\\xd8\\xff\\xe0\\x00\\x10JFIF\\x00\\x01\\x01\\x01\\x00H\\x00H\\x00\\x00\\xff\\xdb\\x00C\\x00\\x08\\x06\\x06\\x07\\x06\\x05\\x08\\x07\\x07\\x07\\t\\t\\x08\\n\\x0c\\x14\\r\\x0c\\x0b\\x0b\\x0c\\x19\\x12\\x13\\x0f\\x14\\x1d\\x1a\\x1f\\x1e\\x1d\\x1a\\x1c\\x1c $.\\' \",#\\x1c\\x1c(7),01444\\x1f\\'9=82<.342\\xff\\xc0\\x00\\x11\\x08\\x00\\x01\\x00\\x01\\x01\\x01\\x11\\x00\\x02\\x11\\x01\\x03\\x11\\x01\\xff\\xc4\\x00\\x14\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\xff\\xc4\\x00\\x14\\x10\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xda\\x00\\x0c\\x03\\x01\\x00\\x02\\x11\\x03\\x11\\x00\\x3f\\x00\\xaa\\xff\\xd9'\n    base64_image = base64.b64encode(jpeg_data).decode('utf-8')\n    created_ids = []\n    for i in range(count):\n        payload = {\n            \"image_data_base64\": base64_image,",
        "detail": "test_list_endpoints",
        "documentation": {}
    },
    {
        "label": "test_list_images",
        "kind": 2,
        "importPath": "test_list_endpoints",
        "description": "test_list_endpoints",
        "peekOfCode": "def test_list_images():\n    \"\"\"Probar el endpoint de listado de imágenes\"\"\"\n    print(\"\\n📋 Probando listado de imágenes...\")\n    try:\n        # Listar todas las imágenes (default)\n        response = requests.get(f\"{BASE_URL}/images/\")\n        print(f\"📊 Status Code: {response.status_code}\")\n        if response.status_code == 200:\n            result = response.json()\n            print(f\"✅ Listado exitoso!\")",
        "detail": "test_list_endpoints",
        "documentation": {}
    },
    {
        "label": "test_list_images_with_pagination",
        "kind": 2,
        "importPath": "test_list_endpoints",
        "description": "test_list_endpoints",
        "peekOfCode": "def test_list_images_with_pagination():\n    \"\"\"Probar paginación en el listado de imágenes\"\"\"\n    print(\"\\n📄 Probando paginación...\")\n    try:\n        # Obtener solo 2 imágenes por página\n        response = requests.get(f\"{BASE_URL}/images/?limit=2&offset=0\")\n        if response.status_code == 200:\n            result = response.json()\n            print(f\"✅ Primera página (limit=2):\")\n            print(f\"  Total: {result['pagination']['total']}\")",
        "detail": "test_list_endpoints",
        "documentation": {}
    },
    {
        "label": "test_get_specific_image",
        "kind": 2,
        "importPath": "test_list_endpoints",
        "description": "test_list_endpoints",
        "peekOfCode": "def test_get_specific_image(image_id):\n    \"\"\"Probar obtener una imagen específica\"\"\"\n    print(f\"\\n🔍 Obteniendo imagen específica ID: {image_id}...\")\n    try:\n        response = requests.get(f\"{BASE_URL}/images/{image_id}\")\n        if response.status_code == 200:\n            result = response.json()\n            print(f\"✅ Imagen obtenida:\")\n            print(f\"  ID: {result['id']}\")\n            print(f\"  Creada: {result['created_at']}\")",
        "detail": "test_list_endpoints",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "test_list_endpoints",
        "description": "test_list_endpoints",
        "peekOfCode": "BASE_URL = \"http://localhost:8000\"\ndef create_sample_images(count=5):\n    \"\"\"Crear algunas imágenes de muestra para probar el listado\"\"\"\n    print(f\"📷 Creando {count} imágenes de muestra...\")\n    # Imagen JPEG simple\n    jpeg_data = b'\\xff\\xd8\\xff\\xe0\\x00\\x10JFIF\\x00\\x01\\x01\\x01\\x00H\\x00H\\x00\\x00\\xff\\xdb\\x00C\\x00\\x08\\x06\\x06\\x07\\x06\\x05\\x08\\x07\\x07\\x07\\t\\t\\x08\\n\\x0c\\x14\\r\\x0c\\x0b\\x0b\\x0c\\x19\\x12\\x13\\x0f\\x14\\x1d\\x1a\\x1f\\x1e\\x1d\\x1a\\x1c\\x1c $.\\' \",#\\x1c\\x1c(7),01444\\x1f\\'9=82<.342\\xff\\xc0\\x00\\x11\\x08\\x00\\x01\\x00\\x01\\x01\\x01\\x11\\x00\\x02\\x11\\x01\\x03\\x11\\x01\\xff\\xc4\\x00\\x14\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\xff\\xc4\\x00\\x14\\x10\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xda\\x00\\x0c\\x03\\x01\\x00\\x02\\x11\\x03\\x11\\x00\\x3f\\x00\\xaa\\xff\\xd9'\n    base64_image = base64.b64encode(jpeg_data).decode('utf-8')\n    created_ids = []\n    for i in range(count):\n        payload = {",
        "detail": "test_list_endpoints",
        "documentation": {}
    }
]